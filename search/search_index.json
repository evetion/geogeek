{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"List of topics https://gist.github.com/hugoledoux/9e3c9e32e14182808c9875c35883ecbd How to fix errors and contribute? Click on the 'Edit this page' You have to login to GitHub Modify the Markdown text Create a pull request","title":"Home"},{"location":"#_1","text":"","title":""},{"location":"#list-of-topics","text":"https://gist.github.com/hugoledoux/9e3c9e32e14182808c9875c35883ecbd","title":"List of topics"},{"location":"#how-to-fix-errors-and-contribute","text":"Click on the 'Edit this page' You have to login to GitHub Modify the Markdown text Create a pull request","title":"How to fix errors and contribute?"},{"location":"c%2B%2B/wslclion/","text":"Using WSL & CLion By far the simplest way to use in C++ libraries such as CGAL (library to perform geometric operations in 2D, 3D, and even nD), GDAL (library to read/write all the vector/raster formats in GIS), or others (eg GEOS ), under Windows is... to install Linux!? Installing all the libraries above is possible directly under Windows, but it is often a massive pain, so we recommend you use WSL--Windows Subsystem for Linux , that is you install a Linux environment \"inside\" your Windows (Win10 or Win11), and use this. Before you continue this tutorial You must first install WSL on your Windows machine. Install GDAL To install GDAL, run the following commands one by one on your Ubuntu terminal: sudo add-apt-repository ppa:ubuntugis/ppa && sudo apt-get update sudo apt-get update sudo apt-get install gdal-bin sudo apt-get install libgdal-dev If everything went correct, you've successfully installed GDAL! Install CGAL Let's install CGAL now with the following two commands: sudo apt-get update sudo apt-get install libcgal-dev If everything went correct, you now have CGAL as well! Note Before starting to use GDAL and CGAL on CLion, you will need to complete the following two steps. Install CMake To install CMake, run the following commands on your Ubuntu terminal. Install the libraries that CMake depends on: sudo apt-get install build-essential libssl-dev Go to the tmp directory: cd /tmp Download the source code: wget https://github.com/Kitware/CMake/releases/download/v3.20.0/cmake-3.20.0.tar.gz When this is complete, extract the file: tar -zxvf cmake-3.20.0.tar.gz Go to the extracted folder: cd cmake-3.20.0 Compile and install CMake: ./bootstrap This may take some time, you should see the following when it is finished. Now run the following command to make it: make This step will also take some time. Once it is finished, you can finally install it: sudo make install Finally, to check if the installation was successful, you can see the CMake version: cmake --version Install GDB GDB is a debugger for C++ and you will need it in CLion to connect to WSL. If you are installing GDB right after CMake, you are probably still in the cmake-3.20.0 folder on your Ubuntu terminal. First, go back to the home directory: cd ../.. Install GDB with the following two commands: sudo apt-get update sudo apt-get install gdb If this method does not work for you, you can also install it through the source code as explained in the second option on this [page]. You can verify the installation by checking the GDB version: gdb --version Once you install GDB, you now have everything you need to connect to WSL in CLion! Connect to CLion Warning The steps to connect with WSL may change depending on your CLion version. This tutorial uses CLion 2021.3. Go to Settings from File or by simply pressing Ctrl+Alt+S. Under Build, Execution, Deployment , go to Toolchains . Then, add a new toolchain by clicking on the + sign and select WSL. It should automatically detect all the fiels (Toolset, CMake, Debugger etc.). However, if you see an error for CMake that it cannot be found, click on Browse on the right-side of CMake and choose the correct file. You can find it under /usr/local/bin/cmake . After this step, you may see the following warning under C++ compiler: Test cmake run finished with errors . In this case, reboot your WSL by typing the following command on your Ubuntu terminal: wsl.exe -t Ubuntu This will close the terminal. Simply open it again by searching Ubuntu on your device. Now, if you check CLion again, you should not see the warning anymore. Finally, do not forget to make WSL default by placing it on the top of the listed toolchains. You can do this by dragging WSL to the top, or by using the arrows. Success Yay, you can now use GDAL and CGAL on Windows with CLion!","title":"Using WSL & CLion"},{"location":"c%2B%2B/wslclion/#using-wsl-clion","text":"By far the simplest way to use in C++ libraries such as CGAL (library to perform geometric operations in 2D, 3D, and even nD), GDAL (library to read/write all the vector/raster formats in GIS), or others (eg GEOS ), under Windows is... to install Linux!? Installing all the libraries above is possible directly under Windows, but it is often a massive pain, so we recommend you use WSL--Windows Subsystem for Linux , that is you install a Linux environment \"inside\" your Windows (Win10 or Win11), and use this. Before you continue this tutorial You must first install WSL on your Windows machine.","title":"Using WSL &amp; CLion"},{"location":"c%2B%2B/wslclion/#install-gdal","text":"To install GDAL, run the following commands one by one on your Ubuntu terminal: sudo add-apt-repository ppa:ubuntugis/ppa && sudo apt-get update sudo apt-get update sudo apt-get install gdal-bin sudo apt-get install libgdal-dev If everything went correct, you've successfully installed GDAL!","title":"Install GDAL"},{"location":"c%2B%2B/wslclion/#install-cgal","text":"Let's install CGAL now with the following two commands: sudo apt-get update sudo apt-get install libcgal-dev If everything went correct, you now have CGAL as well! Note Before starting to use GDAL and CGAL on CLion, you will need to complete the following two steps.","title":"Install CGAL"},{"location":"c%2B%2B/wslclion/#install-cmake","text":"To install CMake, run the following commands on your Ubuntu terminal. Install the libraries that CMake depends on: sudo apt-get install build-essential libssl-dev Go to the tmp directory: cd /tmp Download the source code: wget https://github.com/Kitware/CMake/releases/download/v3.20.0/cmake-3.20.0.tar.gz When this is complete, extract the file: tar -zxvf cmake-3.20.0.tar.gz Go to the extracted folder: cd cmake-3.20.0 Compile and install CMake: ./bootstrap This may take some time, you should see the following when it is finished. Now run the following command to make it: make This step will also take some time. Once it is finished, you can finally install it: sudo make install Finally, to check if the installation was successful, you can see the CMake version: cmake --version","title":"Install CMake"},{"location":"c%2B%2B/wslclion/#install-gdb","text":"GDB is a debugger for C++ and you will need it in CLion to connect to WSL. If you are installing GDB right after CMake, you are probably still in the cmake-3.20.0 folder on your Ubuntu terminal. First, go back to the home directory: cd ../.. Install GDB with the following two commands: sudo apt-get update sudo apt-get install gdb If this method does not work for you, you can also install it through the source code as explained in the second option on this [page]. You can verify the installation by checking the GDB version: gdb --version Once you install GDB, you now have everything you need to connect to WSL in CLion!","title":"Install GDB"},{"location":"c%2B%2B/wslclion/#connect-to-clion","text":"Warning The steps to connect with WSL may change depending on your CLion version. This tutorial uses CLion 2021.3. Go to Settings from File or by simply pressing Ctrl+Alt+S. Under Build, Execution, Deployment , go to Toolchains . Then, add a new toolchain by clicking on the + sign and select WSL. It should automatically detect all the fiels (Toolset, CMake, Debugger etc.). However, if you see an error for CMake that it cannot be found, click on Browse on the right-side of CMake and choose the correct file. You can find it under /usr/local/bin/cmake . After this step, you may see the following warning under C++ compiler: Test cmake run finished with errors . In this case, reboot your WSL by typing the following command on your Ubuntu terminal: wsl.exe -t Ubuntu This will close the terminal. Simply open it again by searching Ubuntu on your device. Now, if you check CLion again, you should not see the warning anymore. Finally, do not forget to make WSL default by placing it on the top of the listed toolchains. You can do this by dragging WSL to the top, or by using the arrows. Success Yay, you can now use GDAL and CGAL on Windows with CLion!","title":"Connect to CLion"},{"location":"git/gitintro/","text":"Intro to Git Tip Introduction to git material should get your started with git. Git, GitHub, or GitLab? The TUDelft has its own Git server (a GitLab server), staff can create repositories, but at the moment students cannot . Also, the repositories, even if created by staff, are not open to the outside world and thus we do not recommend using TUDelft's GitLab. GitHub is free to use for personal use, even for private repository. This is the preferred option.","title":"Intro to Git"},{"location":"git/gitintro/#intro-to-git","text":"Tip Introduction to git material should get your started with git.","title":"Intro to Git"},{"location":"git/gitintro/#git-github-or-gitlab","text":"The TUDelft has its own Git server (a GitLab server), staff can create repositories, but at the moment students cannot . Also, the repositories, even if created by staff, are not open to the outside world and thus we do not recommend using TUDelft's GitLab. GitHub is free to use for personal use, even for private repository. This is the preferred option.","title":"Git, GitHub, or GitLab?"},{"location":"git/goodgit/","text":"A good Git repository Note This list was inspired by the more extensive Checklist Questions to stimulate thought about a Project's Reproducibility (https://github.com/datacarpentry/rr-intro/blob/gh-pages/checklist.md) which we recommend you consider for making your work reproducible. Organization Are all data, code, results, and documentation housed within a monophyletic folder structure? Is the project folder structured to separate your data, code, documentation, and results? Can the project be run from the project's root folder? Is the project under version control? Do files use a consistent naming scheme that indicates what they contain? Workflow and automation Is the workflow clearly documented (with or without code)? Is the workflow scripted, i.e., using code? Is the code well documented? Is the code modular, i.e., does it use functions? Are unit tests available for the code? Does the repository make use of continuous integration tools to insure internal reproduciblity? Documentation Is there a README file that indicates the purpose of the project, who to contact with questions, a map of the directory structure, and a description of what software and hardware is needed to reproduce your workflow? Are there README files in each folder describing the contents of the folder, how they were acquired/generated? Is there a CITATION file that tells users how to site the project, data, and code? Does the project have a LICENSE file? Is the project's repository publicly available? Publication Are papers and reports from the project generated using literate programming tools so that results are not hard-coded? Does the project have a persistent identifier? Data Is the data included or linked. with instructions on how to obtain the data? If data is not included, is this because it is not necessary or generated as part of the project? Are your raw data (if any) and processed data files separated? If data is not open: Is it accessible via a protocol? Is there synthetic data provided so the project can be run? Is citation information available for the data? Does the data use open formats, such as CSV and TXT? Software Is there a list of dependencies? Is a container available to run the proiect? Are version number of every external application used in the process? Does the proiect use only open software?","title":"A good Git repository"},{"location":"git/goodgit/#a-good-git-repository","text":"Note This list was inspired by the more extensive Checklist Questions to stimulate thought about a Project's Reproducibility (https://github.com/datacarpentry/rr-intro/blob/gh-pages/checklist.md) which we recommend you consider for making your work reproducible.","title":"A good Git repository"},{"location":"git/goodgit/#organization","text":"Are all data, code, results, and documentation housed within a monophyletic folder structure? Is the project folder structured to separate your data, code, documentation, and results? Can the project be run from the project's root folder? Is the project under version control? Do files use a consistent naming scheme that indicates what they contain?","title":"Organization"},{"location":"git/goodgit/#workflow-and-automation","text":"Is the workflow clearly documented (with or without code)? Is the workflow scripted, i.e., using code? Is the code well documented? Is the code modular, i.e., does it use functions? Are unit tests available for the code? Does the repository make use of continuous integration tools to insure internal reproduciblity?","title":"Workflow and automation"},{"location":"git/goodgit/#documentation","text":"Is there a README file that indicates the purpose of the project, who to contact with questions, a map of the directory structure, and a description of what software and hardware is needed to reproduce your workflow? Are there README files in each folder describing the contents of the folder, how they were acquired/generated? Is there a CITATION file that tells users how to site the project, data, and code? Does the project have a LICENSE file? Is the project's repository publicly available?","title":"Documentation"},{"location":"git/goodgit/#publication","text":"Are papers and reports from the project generated using literate programming tools so that results are not hard-coded? Does the project have a persistent identifier?","title":"Publication"},{"location":"git/goodgit/#data","text":"Is the data included or linked. with instructions on how to obtain the data? If data is not included, is this because it is not necessary or generated as part of the project? Are your raw data (if any) and processed data files separated? If data is not open: Is it accessible via a protocol? Is there synthetic data provided so the project can be run? Is citation information available for the data? Does the data use open formats, such as CSV and TXT?","title":"Data"},{"location":"git/goodgit/#software","text":"Is there a list of dependencies? Is a container available to run the proiect? Are version number of every external application used in the process? Does the proiect use only open software?","title":"Software"},{"location":"linux/ssh/","text":"Connecting to a Linux server with ssh Due to security measures, you cannot connect directly with your password. Here is how to set this up on a UNIX-like system ( Linux and macOS ). Configuration In your local computer, type ssh-keygen -t ed25519 and follow the instructions. It is recommended to use a password to protect your keys. You'll have to use this password everytime you login after you are done, or you can use ssh-add to store it (once after you restart your computer). Create a file named config in your ~/.ssh folder (or, just vim ~/.ssh/config ) and put the following content: Host bastionex Hostname linux-bastion-ex.tudelft.nl User netid Host godzilla Hostname godzilla.bk.tudelft.nl ProxyCommand ssh -W %h:%p bastionex User gUsername Host website Hostname 3d.bk.tudelft.nl ProxyCommand ssh -W %h:%p bastionex User wUsername Replace netid with your netid, gUsername with your username in godzilla and wUsername with your username in the website server. Copy your public key (as created in step 1) to all three servers respectively. So: ssh-copy-id bastionex and give your TU Delft password when prompted. ssh-copy-id godzilla and give your keys password (set in step 1) and then your godzilla password. ssh-copy-id website and your keys password (set in step 1) and then your website password. Beware you might be prompted for the password of your ssh keys multiple times before you are asked for the actual password of the respective user in each server. Usage As soon as your ~/.ssh/config is defined and your public key is copied correctly, you should be able to login to godzilla or the website with the respective commands: - ssh godzilla - ssh website Comments For students, bastionex is not accesible. They have to request for an account in student-linux.tudelft.nl and then the configuration above should be change to use that hostname instead. On Windows it should be possible to do similar things with puttyssh and puttyagent . Another alternative is to install Windows Subsystem for Linux and some Linux distribution (e.g. Ubuntu ) and follow the same instructions above. To copy files using a graphic interface use WinSCP, and configure a session following the figures here:","title":"Connecting to a Linux server with ssh"},{"location":"linux/ssh/#connecting-to-a-linux-server-with-ssh","text":"Due to security measures, you cannot connect directly with your password. Here is how to set this up on a UNIX-like system ( Linux and macOS ).","title":"Connecting to a Linux server with ssh"},{"location":"linux/ssh/#configuration","text":"In your local computer, type ssh-keygen -t ed25519 and follow the instructions. It is recommended to use a password to protect your keys. You'll have to use this password everytime you login after you are done, or you can use ssh-add to store it (once after you restart your computer). Create a file named config in your ~/.ssh folder (or, just vim ~/.ssh/config ) and put the following content: Host bastionex Hostname linux-bastion-ex.tudelft.nl User netid Host godzilla Hostname godzilla.bk.tudelft.nl ProxyCommand ssh -W %h:%p bastionex User gUsername Host website Hostname 3d.bk.tudelft.nl ProxyCommand ssh -W %h:%p bastionex User wUsername Replace netid with your netid, gUsername with your username in godzilla and wUsername with your username in the website server. Copy your public key (as created in step 1) to all three servers respectively. So: ssh-copy-id bastionex and give your TU Delft password when prompted. ssh-copy-id godzilla and give your keys password (set in step 1) and then your godzilla password. ssh-copy-id website and your keys password (set in step 1) and then your website password. Beware you might be prompted for the password of your ssh keys multiple times before you are asked for the actual password of the respective user in each server.","title":"Configuration"},{"location":"linux/ssh/#usage","text":"As soon as your ~/.ssh/config is defined and your public key is copied correctly, you should be able to login to godzilla or the website with the respective commands: - ssh godzilla - ssh website","title":"Usage"},{"location":"linux/ssh/#comments","text":"For students, bastionex is not accesible. They have to request for an account in student-linux.tudelft.nl and then the configuration above should be change to use that hostname instead. On Windows it should be possible to do similar things with puttyssh and puttyagent . Another alternative is to install Windows Subsystem for Linux and some Linux distribution (e.g. Ubuntu ) and follow the same instructions above. To copy files using a graphic interface use WinSCP, and configure a session following the figures here:","title":"Comments"},{"location":"linux/wsl/","text":"WSL (Windows Subsystem for Linux) WSL is an installation of a Linux environment \"inside\" your Windows (Win10 or Win11). Warning You must have Windows 10 or Windows 11 to be able to follow these steps. To install WSL, open command prompt as administrator. Run the following command: wsl --install This will start the process to install WSL on your device. Once the installation is complete, you will need to reboot your device. After the reboot, wait a couple of seconds for the Ubuntu terminal to open and complete the installation. It will then ask you to specify a username and password. Once you complete this step, your WSL is ready to use! Note You will not be able to use Ctrl + C/V for Copy/Paste on the Ubuntu terminal. Instead, go to Properties by right-clicking on the top of the terminal and enable Use Ctrl+Shift+C/V as Copy/Paste.","title":"WSL (Windows Subsystem for Linux)"},{"location":"linux/wsl/#wsl-windows-subsystem-for-linux","text":"WSL is an installation of a Linux environment \"inside\" your Windows (Win10 or Win11). Warning You must have Windows 10 or Windows 11 to be able to follow these steps. To install WSL, open command prompt as administrator. Run the following command: wsl --install This will start the process to install WSL on your device. Once the installation is complete, you will need to reboot your device. After the reboot, wait a couple of seconds for the Ubuntu terminal to open and complete the installation. It will then ask you to specify a username and password. Once you complete this step, your WSL is ready to use! Note You will not be able to use Ctrl + C/V for Copy/Paste on the Ubuntu terminal. Instead, go to Properties by right-clicking on the top of the terminal and enable Use Ctrl+Shift+C/V as Copy/Paste.","title":"WSL (Windows Subsystem for Linux)"},{"location":"thebest/","text":"The best... This is where it's getting fun, a totally non-objective list of what we find \"best\" to perform daily tasks with computers. Staff OS Text editor Git client C++ IDE Python IDE LaTeX Hugo macOS Sublime Text Sublime Merge CLion Sublime Text Sublime Text + LaTeXTools","title":"The best..."},{"location":"thebest/#the-best","text":"This is where it's getting fun, a totally non-objective list of what we find \"best\" to perform daily tasks with computers. Staff OS Text editor Git client C++ IDE Python IDE LaTeX Hugo macOS Sublime Text Sublime Merge CLion Sublime Text Sublime Text + LaTeXTools","title":"The best..."},{"location":"writing/latexintro/","text":"Intro to LaTeX LaTeX installation Online environment: Overleaf To start, we recommend you use the online LaTeX environment Overleaf since it has a full installation of LaTeX and there is nothing to install. If you login with your TUDelft email, you get extra features (TUDelft pays for it). Local installation If you want to use LaTeX locally (it's faster to compile) then you need either: MiKTeX (Windows) MacTeX (macOS). TeXLive (Linux) Warning For small documents Overleaf is great. But it becomes rather slow for medium to large documents, and then using LaTeX locally is probably a better idea. Getting started The best is to follow the Overleaf's Learn LaTeX in 30min to start. The only crucial thing missing from it is how to add references, for this we suggest you use \"natbib\" ( tutorial about bibliography management with natbib ). Tips and tricks for LaTeX this simple demo gives you tips and tricks to do most of the useful things in LaTeX. Use it as the template for submitting your homeworks for instance. Info LaTeX is great but there are often 37 ways to accomplish something... The template we give you shows you what we think is \"the best to do X\" Which software to use? Editors (if you don't use Overleaf) TeXnicCenter (Windows) TeXStudio (cross-platform) TeXshop (macOS; which is bundled with MacTeX) Visual Studio Code as generic editor with the LaTeX Workshop plugin Texmaker (cross-platform) Sublime Text (cross-platform; TeX support can be added through package control with the LaTeXTools package; also with package control you can get a nice linter called SublimeLinter with TeX support through SublimeLinter-chktex) Managing references JabRef (cross-platform) Zotero (cross-platform; integrations for Office and browsers; use a plugin like better bibtex ) Mendeley (cross-platform; integrations for Office and browsers; integrates with Overleaf professional accounts) BibDesk (macOS) Drawing figures Adobe Illustrator (nice, but \u20ac\u20ac\u20ac) Affinity Designer (macOS, iPadOS and Windows; \u20ac\u20ac but way less than Adobe) Inkscape (cross-platform) IPE (cross-platform; integrates LaTeX text; great for triangulation and geometric stuff) Drawing flowcharts MathCha draw.io OmniGraffle (macOS and iOS; nice, but \u20ac\u20ac\u20ac) Equation writers Grapher (macOS Utilities) Graphical interface to write equations that offers the option to copy them as LaTeX expression LaTeXiT (macOS) utility to write equations in LaTeX and export them for use in other software Mathpix Snip (cross-platform) many cool things with equations Help to make tables Tables Generator (LaTeX tables are tough to type and align, this helps greatly to start)# latex-getting-started Quick LaTeX course","title":"Intro to LaTeX"},{"location":"writing/latexintro/#intro-to-latex","text":"","title":"Intro to LaTeX"},{"location":"writing/latexintro/#latex-installation","text":"","title":"LaTeX installation"},{"location":"writing/latexintro/#online-environment-overleaf","text":"To start, we recommend you use the online LaTeX environment Overleaf since it has a full installation of LaTeX and there is nothing to install. If you login with your TUDelft email, you get extra features (TUDelft pays for it).","title":"Online environment: Overleaf"},{"location":"writing/latexintro/#local-installation","text":"If you want to use LaTeX locally (it's faster to compile) then you need either: MiKTeX (Windows) MacTeX (macOS). TeXLive (Linux) Warning For small documents Overleaf is great. But it becomes rather slow for medium to large documents, and then using LaTeX locally is probably a better idea.","title":"Local installation"},{"location":"writing/latexintro/#getting-started","text":"The best is to follow the Overleaf's Learn LaTeX in 30min to start. The only crucial thing missing from it is how to add references, for this we suggest you use \"natbib\" ( tutorial about bibliography management with natbib ).","title":"Getting started"},{"location":"writing/latexintro/#tips-and-tricks-for-latex","text":"this simple demo gives you tips and tricks to do most of the useful things in LaTeX. Use it as the template for submitting your homeworks for instance. Info LaTeX is great but there are often 37 ways to accomplish something... The template we give you shows you what we think is \"the best to do X\"","title":"Tips and tricks for LaTeX"},{"location":"writing/latexintro/#which-software-to-use","text":"","title":"Which software to use?"},{"location":"writing/latexintro/#editors-if-you-dont-use-overleaf","text":"TeXnicCenter (Windows) TeXStudio (cross-platform) TeXshop (macOS; which is bundled with MacTeX) Visual Studio Code as generic editor with the LaTeX Workshop plugin Texmaker (cross-platform) Sublime Text (cross-platform; TeX support can be added through package control with the LaTeXTools package; also with package control you can get a nice linter called SublimeLinter with TeX support through SublimeLinter-chktex)","title":"Editors (if you don't use Overleaf)"},{"location":"writing/latexintro/#managing-references","text":"JabRef (cross-platform) Zotero (cross-platform; integrations for Office and browsers; use a plugin like better bibtex ) Mendeley (cross-platform; integrations for Office and browsers; integrates with Overleaf professional accounts) BibDesk (macOS)","title":"Managing references"},{"location":"writing/latexintro/#drawing-figures","text":"Adobe Illustrator (nice, but \u20ac\u20ac\u20ac) Affinity Designer (macOS, iPadOS and Windows; \u20ac\u20ac but way less than Adobe) Inkscape (cross-platform) IPE (cross-platform; integrates LaTeX text; great for triangulation and geometric stuff)","title":"Drawing figures"},{"location":"writing/latexintro/#drawing-flowcharts","text":"MathCha draw.io OmniGraffle (macOS and iOS; nice, but \u20ac\u20ac\u20ac)","title":"Drawing flowcharts"},{"location":"writing/latexintro/#equation-writers","text":"Grapher (macOS Utilities) Graphical interface to write equations that offers the option to copy them as LaTeX expression LaTeXiT (macOS) utility to write equations in LaTeX and export them for use in other software Mathpix Snip (cross-platform) many cool things with equations","title":"Equation writers"},{"location":"writing/latexintro/#help-to-make-tables","text":"Tables Generator (LaTeX tables are tough to type and align, this helps greatly to start)# latex-getting-started Quick LaTeX course","title":"Help to make tables"}]}